type SleepData
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [read, delete] }
      { allow: owner, ownerField: "viewers", operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  date: String!
  rating: Int
  night: [NightSegment]
}

type NightSegment {
  value: String!
  sourceName: String!
  sourceId: String!
  startDate: String!
  endDate: String!
}

type Request
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [read, delete, update, create]
      }
      {
        allow: owner
        ownerField: "userId"
        identityClaim: "email"
        operations: [read, delete, update]
      }
      { allow: groups, groups: ["admin"], operations: [read, delete] }
    ]
  ) {
  id: ID!
  requesterName: String!
  requesterId: String!
  userName: String!
  code: String
  userId: String!
  accepted: Boolean!
}

type Mutation {
  createCoachingRequest(input: CreateCoachingRequestInput!): Request
}

input CreateCoachingRequestInput {
  requesterName: String!
  requesterId: String!
  userName: String!
  owner: String
  code: String
  userId: String!
  accepted: Boolean!
}

type User
  @key(
    name: "byConnectionId"
    fields: ["connectionId"]
    queryField: "userByConnectionId"
  )
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [read, update, delete] }
      { allow: groups, groups: ["admin"], operations: [read, delete] }
      { allow: owner, ownerField: "viewers", operations: [read] }
    ]
  ) {
  connectionId: String
  id: ID!
  email: String!
  nickname: String
  darkMode: Boolean
  intercomId: String
  viewers: [String]
  activeCoaching: CoachingData @connection(name: "ActiveCoachingMonth")
  primaryDeviceID: String
  sleepPoints: SleepPoints
}

type SleepPoints {
  efficiency: Int
  duration: Int
  socialJetLag: Int
  timing: Int
}

type CoachingData
  @key(name: "byUser", fields: ["userId"], queryField: "coachingByUser")
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [delete, read] }
      { allow: owner, ownerField: "viewers", operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  stage: Stage
  active: User @connection(name: "ActiveCoachingMonth")
  activeWeek: String
  started: String
  ended: String
  weeks: [Week]
  lessons: [String]
}

enum Stage {
  ONGOING
  PAUSED
  COMPLETED
}

type Week {
  started: String
  ended: String
  locked: Boolean
  slug: String
}

type Habit
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [delete, read] }
      { allow: owner, ownerField: "viewers", operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  dayStreak: Int
  longestDayStreak: Int
  latestCompletedDate: String
  title: String!
  description: String
  date: String!
  days: [DayCompletionRecord]!
  archived: Boolean
  period: Period!
}

enum Period {
  morning
  afternoon
  evening
}

type DayCompletionRecord {
  key: String
  value: Int
}

type Night
  @model
  @aws_iam
  @auth(
    rules: [
      { allow: owner }
      { allow: private, provider: iam, operations: [read] }
      { allow: groups, groups: ["admin"], operations: [delete, read] }
      { allow: owner, ownerField: "viewers", operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  sourceId: String!
  sourceName: String!
  value: NightValue!
  startDate: String!
  endDate: String!
  totalDuration: Int!
}

enum NightValue {
  InBed
  Asleep
  Awake
}

type LikedContent
  @model
  @key(name: "bySlug", fields: ["slug", "id"], queryField: "likedContentBySlug")
  @auth(
    rules: [
      { allow: owner }
      {
        allow: groups
        groups: ["admin"]
        operations: [delete, update, create, read]
      }
    ]
  ) {
  id: ID!
  name: String
  type: String
  slug: String
}

type NightRating
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, update, delete, read]
      }
      { allow: groups, groups: ["admin"], operations: [delete, read] }
      { allow: owner, ownerField: "viewers", operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  rating: Int!
  date: String!
}

type Feedback
  @model
  @key(
    name: "bySlug"
    fields: ["slug", "id"]
    queryField: "feedbackContentBySlug"
  )
  @auth(
    rules: [
      { allow: owner }
      {
        allow: groups
        groups: ["admin"]
        operations: [delete, update, create, read]
      }
    ]
  ) {
  id: String
  type: String
  slug: String!
  rating: Int!
}

type Comment
  @model
  @key(name: "bySlug", fields: ["slug", "id"], queryField: "commentsBySlug")
  @auth(
    rules: [
      { allow: owner }
      {
        allow: groups
        groups: ["admin"]
        operations: [delete, update, create, read]
      }
    ]
  ) {
  id: String
  type: String
  slug: String!
  firstName: String
  lastName: String
  comment: String!
}

type NightNote
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [delete, read] }
      { allow: owner, ownerField: "viewers", operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  date: String!
  dateTime: String!
  content: String!
  meta: NightNoteMeta!
}

type NightNoteMeta {
  tags: [String]!
}
